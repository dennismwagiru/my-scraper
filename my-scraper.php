<?php
/**
 * Plugin Name: My Scraper
 * Plugin URI: https://github.com/dennismwagiru/my-scraper
 * Description: This is a wordpress scraper designed to work autonomously.
 * Version: 1.0
 * Author: Dennis J. Karimi
 * Author URI: https://github.com/dennismwagiru
 */

class MyScraper extends WP_REST_Controller {

	protected $page = null;

	public function __construct() {
		$this->page = isset($_GET['page']) ? $_GET['page'] : null;

		add_action( 'rest_api_init', array( $this, 'register_routes' ) );
		if ( is_admin() ) add_action( 'admin_menu', array( $this, 'my_menu' ) );

		if ($this->page != 'my-scraper')
			return;
		add_action( 'admin_enqueue_scripts', array( $this, 'adminEnqueue' ) );
	}

	/**
	 * Register Scraper Menu
	 */
	function my_menu() {
		add_menu_page( 'My Scraper', 'Scraper', 'activate_plugins', 'my-scraper', array( $this, 'my_scraper_page' ), 'dashicons-layout', '20' );
	}

	/**
	 * Options Page (React)
	 */
	public function my_scraper_page() {
		echo '<div id="app" ></div>';
	}

	/**
	 * Register the routes for the objects of the controller.
	 */

	public function register_routes() {
		$version = '1';
		$namespace = 'my-scrapper/v' . $version;
		$base = 'scrape';

		register_rest_route( $namespace, '/' . $base, array(
			array(
				'methods'               => WP_REST_Server::READABLE,
				'callback'              => array( $this, 'get_items' ),
				'permission_callback'   => array( $this, 'get_items_permissions_check' ),
				'args'                  => array(

				),
			),
			array(
				'methods'               => WP_REST_Server::CREATABLE,
				'callback'              => array( $this, 'create_item' ),
				'permission_callback'   => array( $this, 'create_item_permissions_check' ),
				'args'                  => $this->get_endpoint_args_for_item_schema( true ),
			),
		));
		register_rest_route( $namespace, '/' . $base . '/schema', array(
			'methods'   => WP_REST_Server::READABLE,
			'callback'  => array( $this, 'get_public_item_schema' )
		));
	}

	/**
	 * Get a collection of items
	 *
	 * @param WP_REST_Request $request Full data about the request.
	 * @return WP_Error|WP_REST_Response
	 */
	public function get_items( $request ) {
		return new WP_REST_Response('good', 200);
		return parent::get_items( $request ); // TODO: Change the autogenerated stub
	}

	/**
	 * Create one item from the collection
	 *
	 * @param WP_REST_Request $request Full data about the request.
	 * @return WP_Error|WP_REST_Request
	 */
	public function create_item( $request ) {
		return parent::create_item( $request ); // TODO: Change the autogenerated stub
	}

	/**
	 * Check if a given request has access to get items
	 *
	 * @param WP_REST_Request $request Full data about the request.
	 * @return WP_Error|bool
	 */
	public function get_items_permissions_check( $request ) {
		return true;
	}

	/**
	 * Check if a given request has access to create items
	 *
	 * @param WP_REST_Request $request Full data about the request.
	 * @return WP_Error|bool
	 */
	public function create_item_permissions_check( $request ) {
		return parent::create_item_permissions_check( $request ); // TODO: Change the autogenerated stub
	}

	public function adminEnqueue() {
		wp_enqueue_style('my-scraper-bootstrap-css', plugins_url('assets/css/bootstrap.min.css',__FILE__ ));
		wp_enqueue_style('my-scraper-style', plugins_url('assets/css/my-scraper-style.css',__FILE__ ));
		wp_enqueue_script( 'my-scraper-jquery-js', plugin_dir_url( __FILE__ ) . 'assets/js/jquery-3.4.0.min.js', array(), '1.0', 'all' );
		wp_enqueue_script( 'my-scraper-bootstrap-js', plugin_dir_url( __FILE__ ) . 'assets/js/bootstrap.min.js', array(), '1.0', 'all' );
		wp_enqueue_script( 'my-scraper--bundle', plugin_dir_url( __FILE__ ) . 'assets/js//main.js', array(), '1.0', 'all' );
	}
}

$scraper = new MyScraper();